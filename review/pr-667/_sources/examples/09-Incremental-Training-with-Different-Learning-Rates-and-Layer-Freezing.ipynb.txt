{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2e493825",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Copyright 2022 NVIDIA Corporation. All Rights Reserved.\n",
    "#\n",
    "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
    "# you may not use this file except in compliance with the License.\n",
    "# You may obtain a copy of the License at\n",
    "#\n",
    "#     http://www.apache.org/licenses/LICENSE-2.0\n",
    "#\n",
    "# Unless required by applicable law or agreed to in writing, software\n",
    "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
    "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
    "# See the License for the specific language governing permissions and\n",
    "# limitations under the License.\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15b423f1",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "<img src=\"http://developer.download.nvidia.com/compute/machine-learning/frameworks/nvidia_logo.png\" style=\"width: 90px; float: right;\">\n",
    "\n",
    "# Incremental Training with Different Learning Rates and Layer-Freezing\n",
    "\n",
    "This notebook is created using the latest stable [merlin-tensorflow](https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-tensorflow/tags) container. \n",
    "\n",
    "Merlin Models provide various model APIs for training, as shown in Notebook [Iterating over Deep Learning Models using Merlin Models](https://nvidia-merlin.github.io/models/main/examples/03-Exploring-different-models.html). We can create a model, such as [Two Tower](https://nvidia-merlin.github.io/models/main/models_overview.html?highlight=two%20tower#two-tower), [DLRM](https://nvidia-merlin.github.io/models/main/examples/03-Exploring-different-models.html#dlrm-model) and so on, by simply one line: `model=mm.DLRMModel(schema)`. \n",
    "\n",
    "In this example, we fine-tune a model by setting different learning rates to different layers and freezing embedding tables.\n",
    "\n",
    "\n",
    "### Learning objectives\n",
    "- Training a model with multiple learning rates\n",
    "- Fine-tune a model by freezing embedding tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "381c615c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-08-15 01:26:26.521434: I tensorflow/core/platform/cpu_feature_guard.cc:194] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE3 SSE4.1 SSE4.2 AVX\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-08-15 01:26:29.462851: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1532] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 16255 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB-LS, pci bus id: 0000:86:00.0, compute capability: 7.0\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "import tensorflow as tf\n",
    "\n",
    "import merlin\n",
    "from merlin.datasets.synthetic import generate_data\n",
    "import merlin.models.tf as ml\n",
    "from merlin.schema import Schema, Tags\n",
    "from merlin.io.dataset import Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a197d69",
   "metadata": {},
   "source": [
    "\n",
    "## Build a Two-Tower Model with Merlin Models\n",
    "\n",
    "### Generate Synthetic Dataset\n",
    "We use the data of the first day as training data, and the data of the second day as test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "77e08919-08d9-401c-ad9c-476890d616b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "NUM_ROWS = 100000\n",
    "data_1, data_2, data_3 = generate_data(\"e-commerce-large\", int(NUM_ROWS), set_sizes=(0.33, 0.33, 0.34))\n",
    "schema = data_1.schema"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70100f6f-7060-422a-9363-ad3d12f045dc",
   "metadata": {},
   "source": [
    "### Build the Two-Tower model by Merlon Models module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f1b31f29",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_embeddings = ml.Embeddings(schema.select_by_tag(Tags.ITEM), infer_embedding_sizes=True)\n",
    "query_embeddings = ml.Embeddings(schema.select_by_tag(Tags.USER), infer_embedding_sizes=True)\n",
    "model = ml.TwoTowerModel(schema, \n",
    "                         query_tower=ml.InputBlockV2(schema.select_by_tag(Tags.USER), embeddings=query_embeddings).connect(ml.MLPBlock([512, 256])), \n",
    "                         item_tower=ml.InputBlockV2(schema.select_by_tag(Tags.ITEM), embeddings=item_embeddings).connect(ml.MLPBlock([512, 256])),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba82d988-82cd-48a8-8703-da99a0f257cc",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Iteration 1: Training on the First Day's Data \n",
    "\n",
    "At first, we train the model on the first day's data and evaluate it on the second day's data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "791e06ec-c0cb-4c0f-9e41-7e5c8fa1dc4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:AutoGraph could not transform <bound method Socket.send of <zmq.Socket(zmq.PUSH) at 0x7f792f6cd100>> and will run it as-is.\n",
      "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
      "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
      "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The sampler InBatchSampler returned no samples for this batch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: AutoGraph could not transform <bound method Socket.send of <zmq.Socket(zmq.PUSH) at 0x7f792f6cd100>> and will run it as-is.\n",
      "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
      "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
      "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
      "32/33 [============================>.] - ETA: 0s - loss: 6.9138 - recall_at_10: 0.0238 - mrr_at_10: 0.0212 - ndcg_at_10: 0.0218 - map_at_10: 0.0212 - precision_at_10: 0.0024 - regularization_loss: 0.0000e+00"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The sampler InBatchSampler returned no samples for this batch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33/33 [==============================] - 22s 348ms/step - loss: 6.9034 - recall_at_10: 0.0240 - mrr_at_10: 0.0212 - ndcg_at_10: 0.0218 - map_at_10: 0.0212 - precision_at_10: 0.0024 - regularization_loss: 0.0000e+00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f751034c310>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01), run_eagerly=True)\n",
    "model.fit(data_1, batch_size=1024, epochs=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9e88f906-3174-4be3-a77d-e84ac8ff089d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The sampler InBatchSampler returned no samples for this batch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32/33 [============================>.] - ETA: 0s - loss: 6.9141 - recall_at_10: 0.0201 - mrr_at_10: 0.0082 - ndcg_at_10: 0.0108 - map_at_10: 0.0082 - precision_at_10: 0.0020 - regularization_loss: 0.0000e+00"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The sampler InBatchSampler returned no samples for this batch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33/33 [==============================] - 8s 176ms/step - loss: 6.9037 - recall_at_10: 0.0201 - mrr_at_10: 0.0082 - ndcg_at_10: 0.0108 - map_at_10: 0.0082 - precision_at_10: 0.0020 - regularization_loss: 0.0000e+00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[6.903665065765381,\n",
       " 0.008818386122584343,\n",
       " 0.008818386122584343,\n",
       " 0.011168284341692924,\n",
       " 0.0019424239872023463,\n",
       " 0.01942424289882183,\n",
       " 0.0]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(data_2, batch_size=1024)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c222dcb6-3e69-4283-ad80-5e7395b3fe78",
   "metadata": {},
   "source": [
    "## Iteration 2: Training on the Second Day's Data \n",
    "\n",
    "Now we continue to train the model on the second day's data but using different strategies. Now we can use different learning rate for different layers of the model, i.e. a smaller learning rate for embedding tables while a bigger learning rate for two towers. Here we choose 0.001 as the learning rate for embedding tables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1d50639a-515c-44f1-b9b6-13fdb68ef669",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33/33 [==============================] - 10s 294ms/step - loss: 6.9037 - recall_at_10: 0.2355 - mrr_at_10: 0.2277 - ndcg_at_10: 0.2294 - map_at_10: 0.2277 - precision_at_10: 0.0235 - regularization_loss: 0.0000e+00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f74fb6fed30>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimizer = ml.MultiOptimizer(\n",
    "                default_optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),\n",
    "                optimizers_and_blocks=[ml.OptimizerBlocks(tf.keras.optimizers.Adam(learning_rate=0.001),\n",
    "                                                          [item_embeddings, query_embeddings])])\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01), run_eagerly=True)\n",
    "model.fit(data_2, batch_size=1024, epochs=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2923636d-0189-460c-a55c-3c42b7aed8c5",
   "metadata": {},
   "source": [
    "Test on the third day's data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bd42c5a1-8021-477f-ab82-1158e18f670d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33/34 [============================>.] - ETA: 0s - loss: 6.9037 - recall_at_10: 0.5359 - mrr_at_10: 0.5312 - ndcg_at_10: 0.5323 - map_at_10: 0.5312 - precision_at_10: 0.0536 - regularization_loss: 0.0000e+00"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The sampler InBatchSampler returned no samples for this batch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34/34 [==============================] - 7s 185ms/step - loss: 6.9034 - recall_at_10: 0.5406 - mrr_at_10: 0.5360 - ndcg_at_10: 0.5370 - map_at_10: 0.5360 - precision_at_10: 0.0541 - regularization_loss: 0.0000e+00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[6.903428554534912,\n",
       " 0.614406406879425,\n",
       " 0.614406406879425,\n",
       " 0.6152668595314026,\n",
       " 0.06182496249675751,\n",
       " 0.6182500123977661,\n",
       " 0.0]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(data_3, batch_size=1024)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c589a4e-7654-46a6-84cb-1e012cc7852c",
   "metadata": {},
   "source": [
    "## Iteration 3: Training with Layer-Freezing \n",
    "\n",
    "Suppose we have trained the model on all previous data and achieved a good performance. Now there is incoming new data, but we do not want to change the pretrained embedding tables and only want to train the top MLP layers. We can use `model.freeze_blocks()`.\n",
    "\n",
    "Important note about layer-freezing: Calling `compile()` on a model is meant to \"freeze\" the behavior of that model, which means that `trainable` variables would be preserved for the model, so if you want to freeze any layer of the model, please make sure to compile it again.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6994177d-60fb-4657-80f6-4f40b2d1dc1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"retrieval_model\"\n",
      "___________________________________________________________________________________________\n",
      " Layer (type)                       Output Shape                    Param #     Trainable  \n",
      "===========================================================================================\n",
      " two_tower_block (TwoTowerBlock)    multiple                        341211576   Y          \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_9 (SequentialBloc  multiple                     22156736    Y          |\n",
      "| k)                                                                                      |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| filter_2 (Filter)              multiple                        0           Y          ||\n",
      "||                                                                                       ||\n",
      "|| tower_block (TowerBlock)       multiple                        22156736    Y          ||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| sequential_block_8 (SequentialBloc  multiple                 22156736    Y          |||\n",
      "||| k)                                                                                  |||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| sequential_block_6 (SequentialBloc  multiple               21902016    Y          ||||\n",
      "|||| k)                                                                                ||||\n",
      "|||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||\n",
      "||||| as_ragged_features_1 (AsRaggedFeat  multiple             0           Y          |||||\n",
      "||||| ures)                                                                           |||||\n",
      "|||||                                                                                 |||||\n",
      "||||| parallel_block_1 (ParallelBlock)  multiple               21902016    Y          |||||\n",
      "||||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||||\n",
      "|||||| embeddings (ParallelBlock)  multiple                   21902016    N          ||||||\n",
      "|||||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||||\n",
      "||||||| user_categories (EmbeddingTable)  multiple           146088      N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_shops (EmbeddingTable)  multiple                4669680     N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_brands (EmbeddingTable)  multiple               1856512     N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_intentions (EmbeddingTable)  multiple           1081184     N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_profile (EmbeddingTable)  multiple              792         N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_group (EmbeddingTable)  multiple                120         N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_gender (EmbeddingTable)  multiple               32          N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_age (EmbeddingTable)  multiple                  72          N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_consumption_1 (EmbeddingTable  multiple         40          N          |||||||\n",
      "||||||| )                                                                           |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_consumption_2 (EmbeddingTable  multiple         40          N          |||||||\n",
      "||||||| )                                                                           |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_is_occupied (EmbeddingTable)  multiple          32          N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_geography (EmbeddingTable)  multiple            48          N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| user_id (EmbeddingTable)  multiple                   14147376    N          |||||||\n",
      "||||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||||\n",
      "|||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| sequential_block_3 (SequentialBloc  multiple               254720      Y          ||||\n",
      "|||| k)                                                                                ||||\n",
      "|||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||\n",
      "||||| private__dense_5 (_Dense)  multiple                      123392      Y          |||||\n",
      "|||||                                                                                 |||||\n",
      "||||| private__dense_6 (_Dense)  multiple                      131328      Y          |||||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| model_context (ModelContext)  multiple                       0           N          |||\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_10 (SequentialBlo  multiple                     319054840   Y          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| filter_3 (Filter)              multiple                        0           Y          ||\n",
      "||                                                                                       ||\n",
      "|| tower_block_1 (TowerBlock)     multiple                        319054840   Y          ||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| sequential_block_7 (SequentialBloc  multiple                 319054840   Y          |||\n",
      "||| k)                                                                                  |||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| sequential_block_5 (SequentialBloc  multiple               318791928   Y          ||||\n",
      "|||| k)                                                                                ||||\n",
      "|||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||\n",
      "||||| as_ragged_features (AsRaggedFeatur  multiple             0           Y          |||||\n",
      "||||| es)                                                                             |||||\n",
      "|||||                                                                                 |||||\n",
      "||||| parallel_block (ParallelBlock)  multiple                 318791928   Y          |||||\n",
      "||||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||||\n",
      "|||||| embeddings (ParallelBlock)  multiple                   318791928   N          ||||||\n",
      "|||||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||||\n",
      "||||||| item_category (EmbeddingTable)  multiple             205968      N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| item_shop (EmbeddingTable)  multiple                 33851944    N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| item_intention (EmbeddingTable)  multiple            3850360     N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| item_brand (EmbeddingTable)  multiple                9992640     N          |||||||\n",
      "|||||||                                                                             |||||||\n",
      "||||||| item_id (EmbeddingTable)  multiple                   270891016   N          |||||||\n",
      "||||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||||\n",
      "|||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| sequential_block_4 (SequentialBloc  multiple               262912      Y          ||||\n",
      "|||| k)                                                                                ||||\n",
      "|||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||\n",
      "||||| private__dense_7 (_Dense)  multiple                      131584      Y          |||||\n",
      "|||||                                                                                 |||||\n",
      "||||| private__dense_8 (_Dense)  multiple                      131328      Y          |||||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| model_context (ModelContext)  multiple                       0           N          |||\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " item_retrieval_task (ItemRetrieval  (1024, 1)                      0           Y          \n",
      " Task)                                                                                     \n",
      "                                                                                           \n",
      " model_context (ModelContext)       multiple                        0           N          \n",
      "                                                                                           \n",
      "===========================================================================================\n",
      "Total params: 341,211,577\n",
      "Trainable params: 517,632\n",
      "Non-trainable params: 340,693,945\n",
      "___________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.freeze_blocks([item_embeddings, query_embeddings])\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01), run_eagerly=True)\n",
    "model.summary(expand_nested=True, show_trainable=True, line_length=80)   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc2dcd41-31f7-4c09-b120-3b58900f76d4",
   "metadata": {},
   "source": [
    "When we call `freeze_blocks`, what do we actually do? Each layer maintains a variable called `trainable`. When a layer is created, this variable is set. The default value is `True`, which means all the weights in this layer can be updated. If you change `trainable` into `False`, the weights would not be changed anymore, unless its `trainable` variable becomes `True` again. So when `freeze_blocks` is called, the `trainable` of the layer is set to False.\n",
    "\n",
    "When we call `freeze_blocks` on some layers, all these layers and their children layers become non-trainable. For example, if a `ParallelBlock` is frozen, the children blocks inside this `ParallelBlock` are also frozen. As shown in below summary result, we freeze the `user_embeddings`, and it is a `ParallelBlock`, all the children layers are frozen as well.\n",
    "\n",
    "```\n",
    "|||||| embeddings (ParallelBlock)  multiple                   21902016    N          ||||||\n",
    "|||||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||||||\n",
    "||||||| user_categories (EmbeddingTable)  multiple           146088      N          |||||||\n",
    "|||||||                                                                             |||||||\n",
    "||||||| user_shops (EmbeddingTable)  multiple                4669680     N          |||||||\n",
    "|||||||                                                                             |||||||\n",
    "||||||| user_brands (EmbeddingTable)  multiple               1856512     N          |||||||\n",
    "|||||||                                                                             |||||||\n",
    "||||||| user_intentions (EmbeddingTable)  multiple           1081184     N          |||||||\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c68ebf1-561d-46e5-826d-f96a09937a1b",
   "metadata": {},
   "source": [
    "## Freeze and Unfreeze layers\n",
    "\n",
    "### Freeze Layers by Passing Names or Layers\n",
    "In the above example, By calling `model.freeze_blocks([item_embeddings, query_embeddings])`, we pass the layers themselves into `freeze_blocks`. But if you want to freeze the layers initialized inside the model or just one embedding table of all embedding tables, another way to freeze layers is to pass names of them. \n",
    "\n",
    "Here we create another simple model as an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d656fa8e-19e6-489c-ae52-78d9ae214b0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33/33 [==============================] - 4s 106ms/step - loss: 0.6933 - precision: 0.5017 - recall: 0.4808 - binary_accuracy: 0.5011 - auc: 0.4967 - regularization_loss: 0.0000e+00\n",
      "Model: \"model\"\n",
      "___________________________________________________________________________________________\n",
      " Layer (type)                       Output Shape                    Param #     Trainable  \n",
      "===========================================================================================\n",
      " sequential_block_13 (SequentialBlo  multiple                       357272      Y          \n",
      " ck)                                                                                       \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_11 (SequentialBlo  multiple                     352056      Y          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| as_ragged_features_137 (AsRaggedFe  multiple                   0           Y          ||\n",
      "|| atures)                                                                               ||\n",
      "||                                                                                       ||\n",
      "|| parallel_block_2 (ParallelBlock)  multiple                     352056      Y          ||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| embeddings (ParallelBlock)   multiple                        352056      Y          |||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| user_categories (EmbeddingTable)  multiple                 146088      Y          ||||\n",
      "||||                                                                                   ||||\n",
      "|||| item_category (EmbeddingTable)  multiple                   205968      Y          ||||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_12 (SequentialBlo  multiple                     5216        Y          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| private__dense_9 (_Dense)      multiple                        3136        Y          ||\n",
      "||                                                                                       ||\n",
      "|| private__dense_10 (_Dense)     multiple                        2080        Y          ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " click/binary_classification_task (  multiple                       33          Y          \n",
      " BinaryClassificationTask)                                                                 \n",
      "                                                                                           \n",
      " model_context_1 (ModelContext)     multiple                        0           Y          \n",
      "                                                                                           \n",
      "===========================================================================================\n",
      "Total params: 357,306\n",
      "Trainable params: 357,305\n",
      "Non-trainable params: 1\n",
      "___________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "input_block = ml.InputBlockV2(schema.select_by_name([\"user_categories\", \"item_category\", \"click\"]))\n",
    "body = input_block.connect(ml.MLPBlock([64, 32]))\n",
    "model = ml.Model(body, ml.BinaryClassificationTask(\"click\"))\n",
    "\n",
    "# Build the model\n",
    "model.compile(optimizer=\"adam\", run_eagerly=True)\n",
    "model.fit(data_1, batch_size=1024, epochs=1)\n",
    "model.summary(expand_nested=True, show_trainable=True, line_length=80)  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1052e4e3-2537-446f-9b0d-360b3f20687d",
   "metadata": {},
   "source": [
    "The above result shows the summary table, and all `trainable` variables for every layer are `Y`, which means the entire model is not frozen. Then we can select names of the layers we want to freeze from below summary table, and freeze them. \n",
    "\n",
    "Note that in Jupyter Notebook, the name `sequential_block_12` may change if you run a cell for several times, and it would raise the error, we suggest you to check the summary output table to check the layer's name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dc8481d7-e966-4943-ab28-371e70fcca04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "___________________________________________________________________________________________\n",
      " Layer (type)                       Output Shape                    Param #     Trainable  \n",
      "===========================================================================================\n",
      " sequential_block_13 (SequentialBlo  multiple                       357272      Y          \n",
      " ck)                                                                                       \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_11 (SequentialBlo  multiple                     352056      Y          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| as_ragged_features_137 (AsRaggedFe  multiple                   0           Y          ||\n",
      "|| atures)                                                                               ||\n",
      "||                                                                                       ||\n",
      "|| parallel_block_2 (ParallelBlock)  multiple                     352056      Y          ||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| embeddings (ParallelBlock)   multiple                        352056      Y          |||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| user_categories (EmbeddingTable)  multiple                 146088      N          ||||\n",
      "||||                                                                                   ||||\n",
      "|||| item_category (EmbeddingTable)  multiple                   205968      Y          ||||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_12 (SequentialBlo  multiple                     5216        N          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| private__dense_9 (_Dense)      multiple                        3136        N          ||\n",
      "||                                                                                       ||\n",
      "|| private__dense_10 (_Dense)     multiple                        2080        N          ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " click/binary_classification_task (  multiple                       33          Y          \n",
      " BinaryClassificationTask)                                                                 \n",
      "                                                                                           \n",
      " model_context_1 (ModelContext)     multiple                        0           N          \n",
      "                                                                                           \n",
      "===========================================================================================\n",
      "Total params: 357,306\n",
      "Trainable params: 206,001\n",
      "Non-trainable params: 151,305\n",
      "___________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.freeze_blocks([\"user_categories\",\"sequential_block_12\"])\n",
    "model.summary(expand_nested=True, show_trainable=True, line_length=80)   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1391809a-d4f5-4597-acb9-7a6a65a27825",
   "metadata": {},
   "source": [
    "From the result below, we can see that the layers of `user_categories`,`sequential_block_12`, and their children layers are frozen, i.e. their `trainable` variables become `N`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d3c1591-2150-4615-bf78-5a90c4b8f7d2",
   "metadata": {},
   "source": [
    "### Unfreeze Layers by Passing Names or Layers\n",
    "\n",
    "The freezing and unfreezing APIs provide flexibility, which allow users to unfreeze some or all frozen layers by names or by layers themselves, just like `freeze_blocks`. For example, we can unfreeze the item embedding layer by the layer itself, and then unfreeze the `user_categories` by the name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ac1d8c81-e181-4149-a2ce-634b6bd57d08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "___________________________________________________________________________________________\n",
      " Layer (type)                       Output Shape                    Param #     Trainable  \n",
      "===========================================================================================\n",
      " sequential_block_13 (SequentialBlo  multiple                       357272      Y          \n",
      " ck)                                                                                       \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_11 (SequentialBlo  multiple                     352056      Y          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| as_ragged_features_137 (AsRaggedFe  multiple                   0           Y          ||\n",
      "|| atures)                                                                               ||\n",
      "||                                                                                       ||\n",
      "|| parallel_block_2 (ParallelBlock)  multiple                     352056      Y          ||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| embeddings (ParallelBlock)   multiple                        352056      Y          |||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| user_categories (EmbeddingTable)  multiple                 146088      Y          ||||\n",
      "||||                                                                                   ||||\n",
      "|||| item_category (EmbeddingTable)  multiple                   205968      Y          ||||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_12 (SequentialBlo  multiple                     5216        N          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| private__dense_9 (_Dense)      multiple                        3136        N          ||\n",
      "||                                                                                       ||\n",
      "|| private__dense_10 (_Dense)     multiple                        2080        N          ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " click/binary_classification_task (  multiple                       33          Y          \n",
      " BinaryClassificationTask)                                                                 \n",
      "                                                                                           \n",
      " model_context_1 (ModelContext)     multiple                        0           Y          \n",
      "                                                                                           \n",
      "===========================================================================================\n",
      "Total params: 357,306\n",
      "Trainable params: 352,089\n",
      "Non-trainable params: 5,217\n",
      "___________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.unfreeze_blocks(\"user_categories\")\n",
    "model.summary(expand_nested=True, show_trainable=True, line_length=80) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5337af4e-9df5-49cb-ad7e-001c4993f72b",
   "metadata": {},
   "source": [
    "And `unfreeze_all_frozen_blocks` is provided to unfreeze all layers at once."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "57e84e43-b9a3-4265-a586-7268d78754a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "___________________________________________________________________________________________\n",
      " Layer (type)                       Output Shape                    Param #     Trainable  \n",
      "===========================================================================================\n",
      " sequential_block_13 (SequentialBlo  multiple                       357272      Y          \n",
      " ck)                                                                                       \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_11 (SequentialBlo  multiple                     352056      Y          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| as_ragged_features_137 (AsRaggedFe  multiple                   0           Y          ||\n",
      "|| atures)                                                                               ||\n",
      "||                                                                                       ||\n",
      "|| parallel_block_2 (ParallelBlock)  multiple                     352056      Y          ||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| embeddings (ParallelBlock)   multiple                        352056      Y          |||\n",
      "||||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||||\n",
      "|||| user_categories (EmbeddingTable)  multiple                 146088      Y          ||||\n",
      "||||                                                                                   ||||\n",
      "|||| item_category (EmbeddingTable)  multiple                   205968      Y          ||||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_block_12 (SequentialBlo  multiple                     5216        Y          |\n",
      "| ck)                                                                                     |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| private__dense_9 (_Dense)      multiple                        3136        Y          ||\n",
      "||                                                                                       ||\n",
      "|| private__dense_10 (_Dense)     multiple                        2080        Y          ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " click/binary_classification_task (  multiple                       33          Y          \n",
      " BinaryClassificationTask)                                                                 \n",
      "                                                                                           \n",
      " model_context_1 (ModelContext)     multiple                        0           Y          \n",
      "                                                                                           \n",
      "===========================================================================================\n",
      "Total params: 357,306\n",
      "Trainable params: 357,305\n",
      "Non-trainable params: 1\n",
      "___________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.unfreeze_all_frozen_blocks()\n",
    "model.summary(expand_nested=True, show_trainable=True, line_length=80) "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('merlin')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "vscode": {
   "interpreter": {
    "hash": "c78a7de67f1468ee33d22a76790123f2989400fa0e73ac6b45f15b09432f615d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
