{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-02-17 11:07:50.170973: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-02-17 11:07:51.695487: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1525] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 46352 MB memory:  -> device: 0, name: NVIDIA RTX A6000, pci bus id: 0000:01:00.0, compute capability: 8.6\n",
      "2022-02-17 11:07:51.696901: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1525] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 46363 MB memory:  -> device: 1, name: NVIDIA RTX A6000, pci bus id: 0000:21:00.0, compute capability: 8.6\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_categories</th>\n",
       "      <th>user_intentions</th>\n",
       "      <th>user_profile</th>\n",
       "      <th>user_group</th>\n",
       "      <th>user_gender</th>\n",
       "      <th>user_age</th>\n",
       "      <th>user_consumption_1</th>\n",
       "      <th>user_is_occupied</th>\n",
       "      <th>user_geography</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category</th>\n",
       "      <th>item_user_id</th>\n",
       "      <th>click</th>\n",
       "      <th>like</th>\n",
       "      <th>comment</th>\n",
       "      <th>share</th>\n",
       "      <th>hide</th>\n",
       "      <th>position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>392</td>\n",
       "      <td>2176</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>189</td>\n",
       "      <td>6459</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>145</td>\n",
       "      <td>802</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>582</td>\n",
       "      <td>19963</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>147</td>\n",
       "      <td>3012</td>\n",
       "      <td>16721</td>\n",
       "      <td>49</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>103</td>\n",
       "      <td>3523</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>42</td>\n",
       "      <td>846</td>\n",
       "      <td>4696</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>217</td>\n",
       "      <td>3692</td>\n",
       "      <td>126819</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>23</td>\n",
       "      <td>454</td>\n",
       "      <td>2520</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>257</td>\n",
       "      <td>8807</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>65</td>\n",
       "      <td>1321</td>\n",
       "      <td>7330</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>68</td>\n",
       "      <td>1146</td>\n",
       "      <td>39338</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>14</td>\n",
       "      <td>269</td>\n",
       "      <td>1489</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>69</td>\n",
       "      <td>2349</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>12</td>\n",
       "      <td>227</td>\n",
       "      <td>1260</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>71</td>\n",
       "      <td>1197</td>\n",
       "      <td>41099</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>73</td>\n",
       "      <td>1486</td>\n",
       "      <td>8246</td>\n",
       "      <td>24</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>889</td>\n",
       "      <td>30531</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>59</td>\n",
       "      <td>1197</td>\n",
       "      <td>6643</td>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>667</td>\n",
       "      <td>22898</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows Ã— 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  user_categories  user_intentions  user_profile  user_group  \\\n",
       "0         20              392             2176             7           1   \n",
       "1          8              145              802             3           1   \n",
       "2        147             3012            16721            49           7   \n",
       "3         42              846             4696            14           2   \n",
       "4         23              454             2520             8           1   \n",
       "..       ...              ...              ...           ...         ...   \n",
       "995       65             1321             7330            22           3   \n",
       "996       14              269             1489             5           1   \n",
       "997       12              227             1260             4           1   \n",
       "998       73             1486             8246            24           4   \n",
       "999       59             1197             6643            20           3   \n",
       "\n",
       "     user_gender  user_age  user_consumption_1  user_is_occupied  \\\n",
       "0              1         1                   1                 1   \n",
       "1              1         1                   1                 1   \n",
       "2              1         4                   2                 1   \n",
       "3              1         1                   1                 1   \n",
       "4              1         1                   1                 1   \n",
       "..           ...       ...                 ...               ...   \n",
       "995            1         2                   1                 1   \n",
       "996            1         1                   1                 1   \n",
       "997            1         1                   1                 1   \n",
       "998            1         2                   1                 1   \n",
       "999            1         2                   1                 1   \n",
       "\n",
       "     user_geography  item_id  item_category  item_user_id  click  like  \\\n",
       "0                 1       12            189          6459      1     1   \n",
       "1                 1       35            582         19963      1     1   \n",
       "2                 2        7            103          3523      0     1   \n",
       "3                 1      217           3692        126819      0     1   \n",
       "4                 1       16            257          8807      0     1   \n",
       "..              ...      ...            ...           ...    ...   ...   \n",
       "995               1       68           1146         39338      0     1   \n",
       "996               1        5             69          2349      0     0   \n",
       "997               1       71           1197         41099      0     0   \n",
       "998               1       53            889         30531      0     0   \n",
       "999               1       40            667         22898      1     0   \n",
       "\n",
       "     comment  share  hide  position  \n",
       "0          0      1     0         1  \n",
       "1          0      0     0         1  \n",
       "2          1      1     1         2  \n",
       "3          1      0     1         1  \n",
       "4          0      1     1         3  \n",
       "..       ...    ...   ...       ...  \n",
       "995        0      0     0         3  \n",
       "996        0      0     1         3  \n",
       "997        1      1     1         2  \n",
       "998        1      1     1         3  \n",
       "999        0      1     0         2  \n",
       "\n",
       "[1000 rows x 19 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import merlin.models.tf as ml\n",
    "from merlin.datasets.synthetic import generate_data\n",
    "\n",
    "social_data = generate_data(\"social\", num_rows=1000)\n",
    "\n",
    "social_data.to_ddf()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Retrieval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-02-17 11:07:57.391187: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n",
      "2022-02-17 11:07:58.359543: I tensorflow/stream_executor/cuda/cuda_blas.cc:1774] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:AutoGraph could not transform <bound method Socket.send of <zmq.Socket(zmq.PUSH) at 0x7fab5c2f3100>> and will run it as-is.\n",
      "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
      "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
      "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
      "WARNING: AutoGraph could not transform <bound method Socket.send of <zmq.Socket(zmq.PUSH) at 0x7fab5c2f3100>> and will run it as-is.\n",
      "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
      "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
      "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The sampler InBatchSampler returned no samples for this batch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 8s 240ms/step - ndcg_at_1_10: 0.1113 - ndcg_at_1_20: 0.1572 - recall_at_1_10: 0.2210 - recall_at_1_20: 0.4029 - avg_precision_at_1_10: 0.0788 - avg_precision_at_1_20: 0.0914 - loss: 3.8922 - regularization_loss: 0.0000e+00 - total_loss: 3.8922\n",
      "Epoch 2/2\n",
      "20/20 [==============================] - 5s 241ms/step - ndcg_at_1_10: 0.2854 - ndcg_at_1_20: 0.3357 - recall_at_1_10: 0.5010 - recall_at_1_20: 0.7010 - avg_precision_at_1_10: 0.2204 - avg_precision_at_1_20: 0.2340 - loss: 3.8207 - regularization_loss: 0.0000e+00 - total_loss: 3.8207\n",
      "Number of parameters: 238537970\n"
     ]
    }
   ],
   "source": [
    "retrieval_model = ml.TwoTowerModel(social_data.schema, query_tower=ml.MLPBlock([512, 256]))\n",
    "\n",
    "retrieval_model.compile(optimizer=\"adam\", run_eagerly=True)\n",
    "retrieval_model.fit(social_data, batch_size=50, epochs=2)\n",
    "\n",
    "print(f\"Number of parameters: {retrieval_model.count_params()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Ranking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "20/20 [==============================] - 2s 112ms/step - click/binary_classification_task/precision: 0.4720 - click/binary_classification_task/recall: 0.3052 - click/binary_classification_task/binary_accuracy: 0.4840 - click/binary_classification_task/auc: 0.4846 - like/binary_classification_task/precision: 0.5052 - like/binary_classification_task/recall: 0.5746 - like/binary_classification_task/binary_accuracy: 0.5030 - like/binary_classification_task/auc: 0.5120 - comment/binary_classification_task/precision: 0.4211 - comment/binary_classification_task/recall: 0.0177 - comment/binary_classification_task/binary_accuracy: 0.5440 - comment/binary_classification_task/auc: 0.4972 - share/binary_classification_task/precision: 0.4728 - share/binary_classification_task/recall: 0.4038 - share/binary_classification_task/binary_accuracy: 0.5050 - share/binary_classification_task/auc: 0.4791 - hide/binary_classification_task/precision: 0.5015 - hide/binary_classification_task/recall: 0.3347 - hide/binary_classification_task/binary_accuracy: 0.5110 - hide/binary_classification_task/auc: 0.5094 - loss: 0.6932 - regularization_loss: 0.0000e+00 - total_loss: 0.6932\n",
      "Epoch 2/2\n",
      "20/20 [==============================] - 2s 112ms/step - click/binary_classification_task/precision: 0.6061 - click/binary_classification_task/recall: 0.4819 - click/binary_classification_task/binary_accuracy: 0.5860 - click/binary_classification_task/auc: 0.6349 - like/binary_classification_task/precision: 0.5727 - like/binary_classification_task/recall: 0.6262 - like/binary_classification_task/binary_accuracy: 0.5770 - like/binary_classification_task/auc: 0.6212 - comment/binary_classification_task/precision: 0.6389 - comment/binary_classification_task/recall: 0.0508 - comment/binary_classification_task/binary_accuracy: 0.5570 - comment/binary_classification_task/auc: 0.6445 - share/binary_classification_task/precision: 0.5667 - share/binary_classification_task/recall: 0.2516 - share/binary_classification_task/binary_accuracy: 0.5550 - share/binary_classification_task/auc: 0.5914 - hide/binary_classification_task/precision: 0.6010 - hide/binary_classification_task/recall: 0.4796 - hide/binary_classification_task/binary_accuracy: 0.5890 - hide/binary_classification_task/auc: 0.6129 - loss: 0.6808 - regularization_loss: 0.0000e+00 - total_loss: 0.6808\n",
      "Number of parameters: 219050117\n"
     ]
    }
   ],
   "source": [
    "ranking_model = ml.DLRMModel(\n",
    "    social_data.schema,\n",
    "    embedding_dim=64,\n",
    "    bottom_block=ml.MLPBlock([64]),\n",
    "    top_block=ml.MLPBlock([32]),\n",
    ")\n",
    "\n",
    "ranking_model.compile(optimizer=\"adam\", run_eagerly=True)\n",
    "ranking_model.fit(social_data, batch_size=50, epochs=2)\n",
    "\n",
    "print(f\"Number of parameters: {ranking_model.count_params()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "merlin-tf",
   "language": "python",
   "name": "merlin-tf"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}